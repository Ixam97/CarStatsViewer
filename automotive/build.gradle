plugins {
    alias(libs.plugins.androidApplication)
    alias(libs.plugins.kotlinAndroid)
    alias(libs.plugins.kotlinSerialization)
    alias(libs.plugins.aboutlibraries)
    alias(libs.plugins.kotlinKapt)
    alias(libs.plugins.composeCompiler)
}

def firebase = useFirbase.toBoolean()
def mapbox = useMapbox.toBoolean()

if (firebase) {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'com.google.firebase.crashlytics'
}

android {
    compileSdk 35

    defaultConfig {
        minSdkVersion 29
        targetSdkVersion 35
        versionCode 286
        versionName "0.28.0.0016"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    flavorDimensions = ["version", "aaos"]

    productFlavors {
        stable {
            dimension "version"
            resValue("string","useFirebase", firebase.toString())
        }

        legacy {
            dimension "aaos"
            applicationId "com.shane.ActiveCarStatsViewer"
        }

        carapp {
            dimension "aaos"
            applicationId "de.ixam97.carStatsViewer.carApp"
        }

        dev {
            dimension "version"
            applicationId "com.ixam97.carStatsViewer_dev"
            resValue("string","useFirebase", firebase.toString())
        }
    }

    // use a dummy if mapbox api is not configured
    if (mapbox) {
        sourceSets.main.java.srcDirs += ['src/mapbox/java']
    } else {
        sourceSets.main.java.srcDirs += ['src/mapboxdummy/java']
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }

    packagingOptions {
        pickFirst 'META-INF/LICENSE.md' // picks the Angus Mail license file
        pickFirst 'META-INF/NOTICE.md' // picks the Angus Mail notice file
    }

    lintOptions {
        // Returns whether lint should be quiet (for example, not write informational messages such as paths to report files written)
        quiet true

        // Whether lint should set the exit code of the process if errors are found
        abortOnError false

        // Returns whether lint will only check for errors (ignoring warnings)
        ignoreWarnings true

        // Returns whether lint should check for fatal errors during release builds. Default is true.
        // If issues with severity "fatal" are found, the release build is aborted.
        checkReleaseBuilds false
    }

    // android.car exists since Android 10 (API level 29) Revision 5.
    useLibrary 'android.car'
    namespace 'com.ixam97.carStatsViewer'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    buildFeatures {
        compose true
    }
}

aboutLibraries {
    configPath = "config"
    fetchRemoteLicense = true
}

dependencies {
    // implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation libs.kotlin.stdlib
    implementation libs.androidx.ktx
    implementation libs.androidx.activity
    implementation libs.androidx.fragment
    implementation libs.androidx.recyclerview
    implementation libs.androidx.appcompat
    implementation libs.androidx.constraintlayout
    implementation libs.google.gson
    implementation libs.google.gms.location
    implementation libs.kotlinx.coroutines.android
    implementation libs.kotlinx.coroutines.play.services
    implementation libs.jakarta.mail
    implementation libs.aboutlibraries.core
    implementation libs.aboutlibraries.compose
    implementation libs.airbnb.paris
    implementation libs.github.egm96
    implementation libs.retrofit
    implementation libs.retrofit.converter.gson

    implementation libs.androidx.car.app
    implementation libs.androidx.car.app.automotive

    if (mapbox) {
        implementation('com.mapbox.maps:android:11.6.0')
    }

    implementation libs.androidx.activity.compose
    implementation(platform(libs.androidx.compose.bom))
    implementation libs.androidx.compose.ui
    implementation libs.androidx.compose.material
    implementation libs.androidx.compose.material.icons.extended
    implementation libs.androidx.lifecycle.viewmodel.compose
    implementation libs.androidx.navigation.compose
    implementation libs.kotlinx.serialization.json

    implementation libs.androidx.room
    kapt libs.androidx.room.compiler

    implementation(platform("com.google.firebase:firebase-bom:33.1.2"))
    implementation("com.google.firebase:firebase-crashlytics")
    implementation("com.google.firebase:firebase-analytics")

    debugImplementation libs.squareup.leakcanary

    implementation 'com.github.jetradarmobile:android-snowfall:1.2.1'

    // to fix unresolved references to android.car
    // def sdkDir = project.android.sdkDirectory.canonicalPath
    // def androidCarJar = "$sdkDir/platforms/android-33/optional/android.car.jar"
    // implementation(files(androidCarJar))
}
